/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
const documents = {
    "\n  query GetOrderByNumber($orderNumber: String!) {\n    orders(filters: { orderNumber: { eq: $orderNumber } }) {\n      data {\n        id\n        attributes {\n          orderDate\n          orderNumber\n        }\n      }\n    }\n  }\n": types.GetOrderByNumberDocument,
    "\n  mutation CreateOrder($input: OrderInput!) {\n    createOrder(data: $input) {\n      data {\n        id\n        attributes {\n          orderNumber\n          orderItems\n        }\n      }\n    }\n  }\n": types.CreateOrderDocument,
    "\n  mutation DeleteOrder($id: ID!) {\n    deleteOrder(id: $id) {\n      data {\n        id\n        attributes {\n          orderNumber\n        }\n      }\n    }\n  }\n": types.DeleteOrderDocument,
    "\n  query GetBlogPosts($locale: I18NLocaleCode!, $page: Int!, $pageSize: Int!) {\n    blogPosts(\n      locale: $locale\n      pagination: { page: $page, pageSize: $pageSize }\n      sort: [\"publishedAt:desc\"]\n    ) {\n      data {\n        id\n        attributes {\n          name\n          description\n          slug\n          image {\n            data {\n              attributes {\n                url\n                width\n                height\n                alternativeText\n                formats\n              }\n            }\n          }\n          locale\n          createdAt\n          updatedAt\n          publishedAt\n        }\n      }\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n    }\n  }\n": types.GetBlogPostsDocument,
    "\n  query GetBlogPostsBySlug($slug: String!, $locale: I18NLocaleCode!) {\n    blogPosts(filters: { slug: { eq: $slug } }, locale: $locale) {\n      data {\n        id\n        attributes {\n          name\n          description\n          slug\n          metaTitle\n          metaDescription\n          image {\n            data {\n              attributes {\n                url\n                width\n                height\n                alternativeText\n              }\n            }\n          }\n          locale\n          createdAt\n          updatedAt\n          publishedAt\n          localizations {\n            data {\n              id\n              attributes {\n                locale\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetBlogPostsBySlugDocument,
    "\n  fragment CartProductFields on Product {\n    id\n    title\n    retail\n    currency\n    discount\n    image_link\n    params\n    part_number\n    slug\n    locale\n    localizations {\n      data {\n        id\n        attributes {\n          locale\n          slug\n        }\n      }\n    }\n  }\n": types.CartProductFieldsFragmentDoc,
    "\n  query GetProductsByIds($ids: [ID!]!, $locale: I18NLocaleCode!) {\n    products(filters: { id: { in: $ids } }, locale: $locale) {\n      data {\n        id\n        attributes {\n          ...CartProductFields\n        }\n      }\n    }\n  }\n  \n": types.GetProductsByIdsDocument,
    "\n  fragment CartItemFields on CartItem {\n    id\n    quantity\n    product {\n      ...CartProductFields\n    }\n  }\n": types.CartItemFieldsFragmentDoc,
    "\n  query GetUserCart($locale: I18NLocaleCode!) {\n    userCart(locale: $locale) {\n      cart {\n        cart_items {\n          ...CartItemFields\n        }\n      }\n    }\n  }\n  \n": types.GetUserCartDocument,
    "\n  mutation UpdateCartItem(\n    $input: UpdateCartItemInput!\n    $locale: I18NLocaleCode!\n  ) {\n    updateCartItem(input: $input, locale: $locale) {\n      cart {\n        cart_items {\n          ...CartItemFields\n        }\n      }\n    }\n  }\n  \n": types.UpdateCartItemDocument,
    "\n  mutation RemoveFromCart(\n    $input: RemoveFromCartInput!\n    $locale: I18NLocaleCode!\n  ) {\n    removeFromCart(input: $input, locale: $locale) {\n      cart {\n        cart_items {\n          ...CartItemFields\n        }\n      }\n    }\n  }\n  \n": types.RemoveFromCartDocument,
    "\n  mutation ClearCart($locale: I18NLocaleCode!) {\n    clearCart(locale: $locale) {\n      cart {\n        cart_items {\n          id\n          quantity\n          product {\n            id\n          }\n        }\n      }\n    }\n  }\n": types.ClearCartDocument,
    "\n  mutation SyncCartBySignIn($input: SyncCartInput!, $locale: I18NLocaleCode!) {\n    syncCartBySingIn(input: $input, locale: $locale) {\n      cart {\n        cart_items {\n          ...CartItemFields\n        }\n      }\n    }\n  }\n  \n": types.SyncCartBySignInDocument,
    "\n  query CategoryMenu($locale: I18NLocaleCode!) {\n    categories(locale: $locale) {\n      data {\n        id\n        attributes {\n          name\n          slug\n          locale\n          description\n          icon {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          subcategories(pagination: { limit: -1 }) {\n            data {\n              id\n              attributes {\n                title\n                slug\n                locale\n                description\n                icon {\n                  data {\n                    id\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.CategoryMenuDocument,
    "\n  query GetCategories($locale: I18NLocaleCode!) {\n    categories(locale: $locale) {\n      data {\n        id\n        attributes {\n          name\n          slug\n          locale\n          description\n          icon {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          subcategories(pagination: { limit: -1 }) {\n            data {\n              id\n              attributes {\n                title\n                slug\n                locale\n                description\n                icon {\n                  data {\n                    id\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetCategoriesDocument,
    "\n  query GetCategoryBySlug($slug: String!, $locale: I18NLocaleCode!) {\n    categories(filters: { slug: { eq: $slug } }, locale: $locale) {\n      data {\n        id\n        attributes {\n          name\n          slug\n          locale\n          description\n          langMatches\n          metaTitle\n          metaDescription\n          icon {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          subcategories(pagination: { limit: -1 }) {\n            data {\n              id\n              attributes {\n                title\n                slug\n                locale\n                description\n                metaTitle\n                metaDescription\n                langMatches\n                icon {\n                  data {\n                    id\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetCategoryBySlugDocument,
    "\n  query GetBrands {\n    brands {\n      data {\n        id\n        attributes {\n          title\n          logo {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetBrandsDocument,
    "\n  query GetBanners {\n    banners(sort: \"order:asc\", filters: { isActive: { eq: true } }) {\n      data {\n        id\n        attributes {\n          title\n          altText\n          order\n          image {\n            data {\n              id\n              attributes {\n                formats\n                url\n                width\n                height\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetBannersDocument,
    "\n  query GetSearchProducts($searchTerm: String!, $locale: I18NLocaleCode!) {\n    products(\n      filters: {\n        or: [\n          { title: { containsi: $searchTerm } }\n          { part_number: { containsi: $searchTerm } }\n        ]\n      }\n      locale: $locale\n    ) {\n      data {\n        id\n        attributes {\n          part_number\n          title\n          retail\n          currency\n          image_link\n          slug\n          params\n          additional_images {\n            link\n          }\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n                locale\n                categories {\n                  data {\n                    id\n                    attributes {\n                    locale\n                      slug\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          product_types {\n            data {\n              id\n              attributes {\n              locale\n                slug\n              }\n            }\n          }\n          discount\n        }\n      }\n    }\n  }\n": types.GetSearchProductsDocument,
    "\n  query GetUserFavoriteProducts($locale: I18NLocaleCode!) {\n    userFavorites(locale: $locale) {\n      favoriteProducts {\n        product {\n          data {\n            id\n            attributes {\n              title\n              part_number\n              retail\n              currency\n              image_link\n              slug\n              discount\n              params\n              subcategory {\n                data {\n                  id\n                  attributes {\n                    slug\n                    categories {\n                      data {\n                        id\n                        attributes {\n                          slug\n                          name\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        product_type {\n          data {\n            id\n            attributes {\n              title\n              slug\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetUserFavoriteProductsDocument,
    "\n  mutation AddToFavorites(\n    $input: AddToFavoritesInput!\n    $locale: I18NLocaleCode!\n  ) {\n    addToFavorites(input: $input, locale: $locale) {\n      favoriteProducts {\n        product {\n          data {\n            id\n            attributes {\n              title\n            }\n          }\n        }\n        product_type {\n          data {\n            id\n            attributes {\n              title\n            }\n          }\n        }\n      }\n    }\n  }\n": types.AddToFavoritesDocument,
    "\n  mutation RemoveFromFavorites(\n    $input: RemoveFromFavoritesInput!\n    $locale: I18NLocaleCode!\n  ) {\n    removeFromFavorites(input: $input, locale: $locale) {\n      favoriteProducts {\n        product {\n          data {\n            id\n          }\n        }\n        product_type {\n          data {\n            id\n          }\n        }\n      }\n    }\n  }\n": types.RemoveFromFavoritesDocument,
    "\n  query GetOrderByOrderNumber($orderNumber: String!) {\n    orders(filters: { orderNumber: { eq: $orderNumber } }) {\n      data {\n        id\n        attributes {\n          orderNumber\n          orderDate\n          firstName\n          secondName\n          lastName\n          phoneNumber\n          shippingAddress\n          totalAmount\n          paymentMethod\n          deliveryMethod\n        }\n      }\n    }\n  }\n": types.GetOrderByOrderNumberDocument,
    "\n  query GetProductBySlug(\n    $productSlug: String!\n    $productTypeSlug: String!\n    $locale: I18NLocaleCode!\n  ) {\n    products(filters: { slug: { eq: $productSlug } }, locale: $locale) {\n      data {\n        id\n        attributes {\n          part_number\n          title\n          retail\n          currency\n          image_link\n          description\n          discount\n          slug\n          locale\n          langMatches\n          additional_images {\n            id\n            link\n          }\n          params\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n                locale\n                title\n                categories {\n                  data {\n                    id\n                    attributes {\n                      locale\n                      slug\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          product_types(filters: { slug: { eq: $productTypeSlug } }) {\n            data {\n              id\n              attributes {\n                slug\n                locale\n                title\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetProductBySlugDocument,
    "\n  query GetProductTypes($subcategoryId: ID!, $locale: I18NLocaleCode!) {\n    productTypes(\n      filters: { subcategories: { id: { eq: $subcategoryId } } }\n      pagination: { limit: -1 }\n      locale: $locale\n    ) {\n      data {\n        id\n        attributes {\n          title\n          slug\n          locale\n          metaTitle\n          metaDescription\n          langMatches\n          icon {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          description\n        }\n      }\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n  }\n": types.GetProductTypesDocument,
    "\n  query GetProductTypeBySlug($slug: String!, $locale: I18NLocaleCode!) {\n    productTypes(\n      filters: { slug: { eq: $slug } }\n      pagination: { limit: -1 }\n      locale: $locale\n    ) {\n      data {\n        id\n        attributes {\n          title\n          slug\n          locale\n          metaTitle\n          metaDescription\n          langMatches\n          icon {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          description\n        }\n      }\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n  }\n": types.GetProductTypeBySlugDocument,
    "\n  query GetProductTypeFilters(\n    $productTypeId: ID\n    $subcategoryId: ID!\n    $locale: I18NLocaleCode!\n  ) {\n    productTypeFilters(\n      productTypeId: $productTypeId\n      subcategoryId: $subcategoryId\n      locale: $locale\n    )\n  }\n": types.GetProductTypeFiltersDocument,
    "\n  query GetProducts($pageSize: Int!, $locale: I18NLocaleCode!) {\n    products(pagination: { pageSize: $pageSize }, locale: $locale) {\n      data {\n        id\n        attributes {\n          part_number\n          title\n          retail\n          currency\n          image_link\n          slug\n          locale\n          params\n          additional_images {\n            link\n          }\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n                locale\n              }\n            }\n          }\n          product_types {\n            data {\n              id\n              attributes {\n                slug\n                locale\n              }\n            }\n          }\n          discount\n        }\n      }\n    }\n  }\n": types.GetProductsDocument,
    "\n  query GetFilteredProducts(\n    $productTypeId: ID\n    $filters: [FilterInput!]\n    $cursor: String\n    $page: Int\n    $pageSize: Int\n    $subcategoryId: ID!\n    $locale: I18NLocaleCode!\n    $sort: [String!]\n    $minPrice: Float\n    $maxPrice: Float\n  ) {\n    filteredProducts(\n      productTypeId: $productTypeId\n      filters: $filters\n      cursor: $cursor\n      page: $page\n      pageSize: $pageSize\n      subcategoryId: $subcategoryId\n      locale: $locale\n      sort: $sort\n      minPrice: $minPrice\n      maxPrice: $maxPrice\n    ) {\n      products {\n        id\n        title\n        part_number\n        retail\n        image_link\n        params\n        currency\n        additional_images {\n          link\n        }\n        discount\n        slug\n        locale\n        product_types {\n          data {\n            id\n            attributes {\n              slug\n              locale\n            }\n          }\n        }\n        subcategory {\n          data {\n            id\n            attributes {\n              slug\n              locale\n              categories {\n                data {\n                  id\n                  attributes {\n                    slug\n                    locale\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      nextCursor\n      pageCount\n      totalCount\n      currentPage\n    }\n  }\n": types.GetFilteredProductsDocument,
    "\n  query GetMaxPrice(\n    $subcategoryId: ID!\n    $productTypeId: ID\n    $locale: I18NLocaleCode!\n  ) {\n    maxProductPrice(\n      subcategoryId: $subcategoryId\n      productTypeId: $productTypeId\n      locale: $locale\n    )\n  }\n": types.GetMaxPriceDocument,
    "\n  query GetHomePageProducts($limit: Int!, $locale: I18NLocaleCode!) {\n    topProducts: products(\n      filters: { salesCount: { gt: 0 } }\n      sort: \"salesCount:desc\"\n      pagination: { limit: $limit }\n      locale: $locale\n    ) {\n      data {\n        id\n        attributes {\n          title\n          part_number\n          retail\n          currency\n          image_link\n          slug\n          params\n          discount\n          salesCount\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n                categories {\n                  data {\n                    id\n                    attributes {\n                      slug\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          product_types {\n            data {\n              id\n              attributes {\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n    newProducts: products(\n      sort: \"createdAt:desc\"\n      pagination: { limit: $limit }\n      locale: $locale\n    ) {\n      data {\n        id\n        attributes {\n          title\n          part_number\n          retail\n          currency\n          image_link\n          slug\n          params\n          discount\n          salesCount\n          createdAt\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n                categories {\n                  data {\n                    id\n                    attributes {\n                      slug\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          product_types {\n            data {\n              id\n              attributes {\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n    saleProducts: products(\n      filters: { discount: { gt: 0 } }\n      sort: \"discount:desc\"\n      pagination: { limit: $limit }\n      locale: $locale\n    ) {\n      data {\n        id\n        attributes {\n          title\n          part_number\n          retail\n          currency\n          image_link\n          slug\n          params\n          discount\n          salesCount\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n                categories {\n                  data {\n                    id\n                    attributes {\n                      slug\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          product_types {\n            data {\n              id\n              attributes {\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetHomePageProductsDocument,
    "\n  query GetShopReviews {\n    shopReviews(sort: \"createdAt:desc\") {\n      data {\n        id\n        attributes {\n          customerName\n          comment\n          overallRating\n          selectionConvenience\n          managerConsultation\n          productDelivery\n          paymentProcess\n          createdAt\n        }\n      }\n    }\n  }\n": types.GetShopReviewsDocument,
    "\n  mutation CreateShopReview($input: ShopReviewInput!) {\n    createShopReview(data: $input) {\n      data {\n        id\n        attributes {\n          customerName\n          comment\n          overallRating\n          selectionConvenience\n          managerConsultation\n          productDelivery\n          paymentProcess\n          createdAt\n        }\n      }\n    }\n  }\n": types.CreateShopReviewDocument,
    "\n  query GetSubcategoryBySlug($slug: String!, $locale: I18NLocaleCode!) {\n    subcategories(filters: { slug: { eq: $slug } }, locale: $locale) {\n      data {\n        id\n        attributes {\n          title\n          slug\n          locale\n          description\n          metaTitle\n          metaDescription\n          langMatches\n          icon {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          categories {\n            data {\n              id\n              attributes {\n                slug\n                locale\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetSubcategoryBySlugDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetOrderByNumber($orderNumber: String!) {\n    orders(filters: { orderNumber: { eq: $orderNumber } }) {\n      data {\n        id\n        attributes {\n          orderDate\n          orderNumber\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetOrderByNumber($orderNumber: String!) {\n    orders(filters: { orderNumber: { eq: $orderNumber } }) {\n      data {\n        id\n        attributes {\n          orderDate\n          orderNumber\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateOrder($input: OrderInput!) {\n    createOrder(data: $input) {\n      data {\n        id\n        attributes {\n          orderNumber\n          orderItems\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateOrder($input: OrderInput!) {\n    createOrder(data: $input) {\n      data {\n        id\n        attributes {\n          orderNumber\n          orderItems\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteOrder($id: ID!) {\n    deleteOrder(id: $id) {\n      data {\n        id\n        attributes {\n          orderNumber\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteOrder($id: ID!) {\n    deleteOrder(id: $id) {\n      data {\n        id\n        attributes {\n          orderNumber\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetBlogPosts($locale: I18NLocaleCode!, $page: Int!, $pageSize: Int!) {\n    blogPosts(\n      locale: $locale\n      pagination: { page: $page, pageSize: $pageSize }\n      sort: [\"publishedAt:desc\"]\n    ) {\n      data {\n        id\n        attributes {\n          name\n          description\n          slug\n          image {\n            data {\n              attributes {\n                url\n                width\n                height\n                alternativeText\n                formats\n              }\n            }\n          }\n          locale\n          createdAt\n          updatedAt\n          publishedAt\n        }\n      }\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetBlogPosts($locale: I18NLocaleCode!, $page: Int!, $pageSize: Int!) {\n    blogPosts(\n      locale: $locale\n      pagination: { page: $page, pageSize: $pageSize }\n      sort: [\"publishedAt:desc\"]\n    ) {\n      data {\n        id\n        attributes {\n          name\n          description\n          slug\n          image {\n            data {\n              attributes {\n                url\n                width\n                height\n                alternativeText\n                formats\n              }\n            }\n          }\n          locale\n          createdAt\n          updatedAt\n          publishedAt\n        }\n      }\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetBlogPostsBySlug($slug: String!, $locale: I18NLocaleCode!) {\n    blogPosts(filters: { slug: { eq: $slug } }, locale: $locale) {\n      data {\n        id\n        attributes {\n          name\n          description\n          slug\n          metaTitle\n          metaDescription\n          image {\n            data {\n              attributes {\n                url\n                width\n                height\n                alternativeText\n              }\n            }\n          }\n          locale\n          createdAt\n          updatedAt\n          publishedAt\n          localizations {\n            data {\n              id\n              attributes {\n                locale\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetBlogPostsBySlug($slug: String!, $locale: I18NLocaleCode!) {\n    blogPosts(filters: { slug: { eq: $slug } }, locale: $locale) {\n      data {\n        id\n        attributes {\n          name\n          description\n          slug\n          metaTitle\n          metaDescription\n          image {\n            data {\n              attributes {\n                url\n                width\n                height\n                alternativeText\n              }\n            }\n          }\n          locale\n          createdAt\n          updatedAt\n          publishedAt\n          localizations {\n            data {\n              id\n              attributes {\n                locale\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CartProductFields on Product {\n    id\n    title\n    retail\n    currency\n    discount\n    image_link\n    params\n    part_number\n    slug\n    locale\n    localizations {\n      data {\n        id\n        attributes {\n          locale\n          slug\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment CartProductFields on Product {\n    id\n    title\n    retail\n    currency\n    discount\n    image_link\n    params\n    part_number\n    slug\n    locale\n    localizations {\n      data {\n        id\n        attributes {\n          locale\n          slug\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProductsByIds($ids: [ID!]!, $locale: I18NLocaleCode!) {\n    products(filters: { id: { in: $ids } }, locale: $locale) {\n      data {\n        id\n        attributes {\n          ...CartProductFields\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query GetProductsByIds($ids: [ID!]!, $locale: I18NLocaleCode!) {\n    products(filters: { id: { in: $ids } }, locale: $locale) {\n      data {\n        id\n        attributes {\n          ...CartProductFields\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CartItemFields on CartItem {\n    id\n    quantity\n    product {\n      ...CartProductFields\n    }\n  }\n"): (typeof documents)["\n  fragment CartItemFields on CartItem {\n    id\n    quantity\n    product {\n      ...CartProductFields\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUserCart($locale: I18NLocaleCode!) {\n    userCart(locale: $locale) {\n      cart {\n        cart_items {\n          ...CartItemFields\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query GetUserCart($locale: I18NLocaleCode!) {\n    userCart(locale: $locale) {\n      cart {\n        cart_items {\n          ...CartItemFields\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCartItem(\n    $input: UpdateCartItemInput!\n    $locale: I18NLocaleCode!\n  ) {\n    updateCartItem(input: $input, locale: $locale) {\n      cart {\n        cart_items {\n          ...CartItemFields\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  mutation UpdateCartItem(\n    $input: UpdateCartItemInput!\n    $locale: I18NLocaleCode!\n  ) {\n    updateCartItem(input: $input, locale: $locale) {\n      cart {\n        cart_items {\n          ...CartItemFields\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveFromCart(\n    $input: RemoveFromCartInput!\n    $locale: I18NLocaleCode!\n  ) {\n    removeFromCart(input: $input, locale: $locale) {\n      cart {\n        cart_items {\n          ...CartItemFields\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  mutation RemoveFromCart(\n    $input: RemoveFromCartInput!\n    $locale: I18NLocaleCode!\n  ) {\n    removeFromCart(input: $input, locale: $locale) {\n      cart {\n        cart_items {\n          ...CartItemFields\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ClearCart($locale: I18NLocaleCode!) {\n    clearCart(locale: $locale) {\n      cart {\n        cart_items {\n          id\n          quantity\n          product {\n            id\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ClearCart($locale: I18NLocaleCode!) {\n    clearCart(locale: $locale) {\n      cart {\n        cart_items {\n          id\n          quantity\n          product {\n            id\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SyncCartBySignIn($input: SyncCartInput!, $locale: I18NLocaleCode!) {\n    syncCartBySingIn(input: $input, locale: $locale) {\n      cart {\n        cart_items {\n          ...CartItemFields\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  mutation SyncCartBySignIn($input: SyncCartInput!, $locale: I18NLocaleCode!) {\n    syncCartBySingIn(input: $input, locale: $locale) {\n      cart {\n        cart_items {\n          ...CartItemFields\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CategoryMenu($locale: I18NLocaleCode!) {\n    categories(locale: $locale) {\n      data {\n        id\n        attributes {\n          name\n          slug\n          locale\n          description\n          icon {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          subcategories(pagination: { limit: -1 }) {\n            data {\n              id\n              attributes {\n                title\n                slug\n                locale\n                description\n                icon {\n                  data {\n                    id\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CategoryMenu($locale: I18NLocaleCode!) {\n    categories(locale: $locale) {\n      data {\n        id\n        attributes {\n          name\n          slug\n          locale\n          description\n          icon {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          subcategories(pagination: { limit: -1 }) {\n            data {\n              id\n              attributes {\n                title\n                slug\n                locale\n                description\n                icon {\n                  data {\n                    id\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCategories($locale: I18NLocaleCode!) {\n    categories(locale: $locale) {\n      data {\n        id\n        attributes {\n          name\n          slug\n          locale\n          description\n          icon {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          subcategories(pagination: { limit: -1 }) {\n            data {\n              id\n              attributes {\n                title\n                slug\n                locale\n                description\n                icon {\n                  data {\n                    id\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCategories($locale: I18NLocaleCode!) {\n    categories(locale: $locale) {\n      data {\n        id\n        attributes {\n          name\n          slug\n          locale\n          description\n          icon {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          subcategories(pagination: { limit: -1 }) {\n            data {\n              id\n              attributes {\n                title\n                slug\n                locale\n                description\n                icon {\n                  data {\n                    id\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCategoryBySlug($slug: String!, $locale: I18NLocaleCode!) {\n    categories(filters: { slug: { eq: $slug } }, locale: $locale) {\n      data {\n        id\n        attributes {\n          name\n          slug\n          locale\n          description\n          langMatches\n          metaTitle\n          metaDescription\n          icon {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          subcategories(pagination: { limit: -1 }) {\n            data {\n              id\n              attributes {\n                title\n                slug\n                locale\n                description\n                metaTitle\n                metaDescription\n                langMatches\n                icon {\n                  data {\n                    id\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCategoryBySlug($slug: String!, $locale: I18NLocaleCode!) {\n    categories(filters: { slug: { eq: $slug } }, locale: $locale) {\n      data {\n        id\n        attributes {\n          name\n          slug\n          locale\n          description\n          langMatches\n          metaTitle\n          metaDescription\n          icon {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          subcategories(pagination: { limit: -1 }) {\n            data {\n              id\n              attributes {\n                title\n                slug\n                locale\n                description\n                metaTitle\n                metaDescription\n                langMatches\n                icon {\n                  data {\n                    id\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetBrands {\n    brands {\n      data {\n        id\n        attributes {\n          title\n          logo {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetBrands {\n    brands {\n      data {\n        id\n        attributes {\n          title\n          logo {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetBanners {\n    banners(sort: \"order:asc\", filters: { isActive: { eq: true } }) {\n      data {\n        id\n        attributes {\n          title\n          altText\n          order\n          image {\n            data {\n              id\n              attributes {\n                formats\n                url\n                width\n                height\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetBanners {\n    banners(sort: \"order:asc\", filters: { isActive: { eq: true } }) {\n      data {\n        id\n        attributes {\n          title\n          altText\n          order\n          image {\n            data {\n              id\n              attributes {\n                formats\n                url\n                width\n                height\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSearchProducts($searchTerm: String!, $locale: I18NLocaleCode!) {\n    products(\n      filters: {\n        or: [\n          { title: { containsi: $searchTerm } }\n          { part_number: { containsi: $searchTerm } }\n        ]\n      }\n      locale: $locale\n    ) {\n      data {\n        id\n        attributes {\n          part_number\n          title\n          retail\n          currency\n          image_link\n          slug\n          params\n          additional_images {\n            link\n          }\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n                locale\n                categories {\n                  data {\n                    id\n                    attributes {\n                    locale\n                      slug\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          product_types {\n            data {\n              id\n              attributes {\n              locale\n                slug\n              }\n            }\n          }\n          discount\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSearchProducts($searchTerm: String!, $locale: I18NLocaleCode!) {\n    products(\n      filters: {\n        or: [\n          { title: { containsi: $searchTerm } }\n          { part_number: { containsi: $searchTerm } }\n        ]\n      }\n      locale: $locale\n    ) {\n      data {\n        id\n        attributes {\n          part_number\n          title\n          retail\n          currency\n          image_link\n          slug\n          params\n          additional_images {\n            link\n          }\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n                locale\n                categories {\n                  data {\n                    id\n                    attributes {\n                    locale\n                      slug\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          product_types {\n            data {\n              id\n              attributes {\n              locale\n                slug\n              }\n            }\n          }\n          discount\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUserFavoriteProducts($locale: I18NLocaleCode!) {\n    userFavorites(locale: $locale) {\n      favoriteProducts {\n        product {\n          data {\n            id\n            attributes {\n              title\n              part_number\n              retail\n              currency\n              image_link\n              slug\n              discount\n              params\n              subcategory {\n                data {\n                  id\n                  attributes {\n                    slug\n                    categories {\n                      data {\n                        id\n                        attributes {\n                          slug\n                          name\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        product_type {\n          data {\n            id\n            attributes {\n              title\n              slug\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetUserFavoriteProducts($locale: I18NLocaleCode!) {\n    userFavorites(locale: $locale) {\n      favoriteProducts {\n        product {\n          data {\n            id\n            attributes {\n              title\n              part_number\n              retail\n              currency\n              image_link\n              slug\n              discount\n              params\n              subcategory {\n                data {\n                  id\n                  attributes {\n                    slug\n                    categories {\n                      data {\n                        id\n                        attributes {\n                          slug\n                          name\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        product_type {\n          data {\n            id\n            attributes {\n              title\n              slug\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddToFavorites(\n    $input: AddToFavoritesInput!\n    $locale: I18NLocaleCode!\n  ) {\n    addToFavorites(input: $input, locale: $locale) {\n      favoriteProducts {\n        product {\n          data {\n            id\n            attributes {\n              title\n            }\n          }\n        }\n        product_type {\n          data {\n            id\n            attributes {\n              title\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddToFavorites(\n    $input: AddToFavoritesInput!\n    $locale: I18NLocaleCode!\n  ) {\n    addToFavorites(input: $input, locale: $locale) {\n      favoriteProducts {\n        product {\n          data {\n            id\n            attributes {\n              title\n            }\n          }\n        }\n        product_type {\n          data {\n            id\n            attributes {\n              title\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveFromFavorites(\n    $input: RemoveFromFavoritesInput!\n    $locale: I18NLocaleCode!\n  ) {\n    removeFromFavorites(input: $input, locale: $locale) {\n      favoriteProducts {\n        product {\n          data {\n            id\n          }\n        }\n        product_type {\n          data {\n            id\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveFromFavorites(\n    $input: RemoveFromFavoritesInput!\n    $locale: I18NLocaleCode!\n  ) {\n    removeFromFavorites(input: $input, locale: $locale) {\n      favoriteProducts {\n        product {\n          data {\n            id\n          }\n        }\n        product_type {\n          data {\n            id\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetOrderByOrderNumber($orderNumber: String!) {\n    orders(filters: { orderNumber: { eq: $orderNumber } }) {\n      data {\n        id\n        attributes {\n          orderNumber\n          orderDate\n          firstName\n          secondName\n          lastName\n          phoneNumber\n          shippingAddress\n          totalAmount\n          paymentMethod\n          deliveryMethod\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetOrderByOrderNumber($orderNumber: String!) {\n    orders(filters: { orderNumber: { eq: $orderNumber } }) {\n      data {\n        id\n        attributes {\n          orderNumber\n          orderDate\n          firstName\n          secondName\n          lastName\n          phoneNumber\n          shippingAddress\n          totalAmount\n          paymentMethod\n          deliveryMethod\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProductBySlug(\n    $productSlug: String!\n    $productTypeSlug: String!\n    $locale: I18NLocaleCode!\n  ) {\n    products(filters: { slug: { eq: $productSlug } }, locale: $locale) {\n      data {\n        id\n        attributes {\n          part_number\n          title\n          retail\n          currency\n          image_link\n          description\n          discount\n          slug\n          locale\n          langMatches\n          additional_images {\n            id\n            link\n          }\n          params\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n                locale\n                title\n                categories {\n                  data {\n                    id\n                    attributes {\n                      locale\n                      slug\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          product_types(filters: { slug: { eq: $productTypeSlug } }) {\n            data {\n              id\n              attributes {\n                slug\n                locale\n                title\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProductBySlug(\n    $productSlug: String!\n    $productTypeSlug: String!\n    $locale: I18NLocaleCode!\n  ) {\n    products(filters: { slug: { eq: $productSlug } }, locale: $locale) {\n      data {\n        id\n        attributes {\n          part_number\n          title\n          retail\n          currency\n          image_link\n          description\n          discount\n          slug\n          locale\n          langMatches\n          additional_images {\n            id\n            link\n          }\n          params\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n                locale\n                title\n                categories {\n                  data {\n                    id\n                    attributes {\n                      locale\n                      slug\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          product_types(filters: { slug: { eq: $productTypeSlug } }) {\n            data {\n              id\n              attributes {\n                slug\n                locale\n                title\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProductTypes($subcategoryId: ID!, $locale: I18NLocaleCode!) {\n    productTypes(\n      filters: { subcategories: { id: { eq: $subcategoryId } } }\n      pagination: { limit: -1 }\n      locale: $locale\n    ) {\n      data {\n        id\n        attributes {\n          title\n          slug\n          locale\n          metaTitle\n          metaDescription\n          langMatches\n          icon {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          description\n        }\n      }\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProductTypes($subcategoryId: ID!, $locale: I18NLocaleCode!) {\n    productTypes(\n      filters: { subcategories: { id: { eq: $subcategoryId } } }\n      pagination: { limit: -1 }\n      locale: $locale\n    ) {\n      data {\n        id\n        attributes {\n          title\n          slug\n          locale\n          metaTitle\n          metaDescription\n          langMatches\n          icon {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          description\n        }\n      }\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProductTypeBySlug($slug: String!, $locale: I18NLocaleCode!) {\n    productTypes(\n      filters: { slug: { eq: $slug } }\n      pagination: { limit: -1 }\n      locale: $locale\n    ) {\n      data {\n        id\n        attributes {\n          title\n          slug\n          locale\n          metaTitle\n          metaDescription\n          langMatches\n          icon {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          description\n        }\n      }\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProductTypeBySlug($slug: String!, $locale: I18NLocaleCode!) {\n    productTypes(\n      filters: { slug: { eq: $slug } }\n      pagination: { limit: -1 }\n      locale: $locale\n    ) {\n      data {\n        id\n        attributes {\n          title\n          slug\n          locale\n          metaTitle\n          metaDescription\n          langMatches\n          icon {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          description\n        }\n      }\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProductTypeFilters(\n    $productTypeId: ID\n    $subcategoryId: ID!\n    $locale: I18NLocaleCode!\n  ) {\n    productTypeFilters(\n      productTypeId: $productTypeId\n      subcategoryId: $subcategoryId\n      locale: $locale\n    )\n  }\n"): (typeof documents)["\n  query GetProductTypeFilters(\n    $productTypeId: ID\n    $subcategoryId: ID!\n    $locale: I18NLocaleCode!\n  ) {\n    productTypeFilters(\n      productTypeId: $productTypeId\n      subcategoryId: $subcategoryId\n      locale: $locale\n    )\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProducts($pageSize: Int!, $locale: I18NLocaleCode!) {\n    products(pagination: { pageSize: $pageSize }, locale: $locale) {\n      data {\n        id\n        attributes {\n          part_number\n          title\n          retail\n          currency\n          image_link\n          slug\n          locale\n          params\n          additional_images {\n            link\n          }\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n                locale\n              }\n            }\n          }\n          product_types {\n            data {\n              id\n              attributes {\n                slug\n                locale\n              }\n            }\n          }\n          discount\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProducts($pageSize: Int!, $locale: I18NLocaleCode!) {\n    products(pagination: { pageSize: $pageSize }, locale: $locale) {\n      data {\n        id\n        attributes {\n          part_number\n          title\n          retail\n          currency\n          image_link\n          slug\n          locale\n          params\n          additional_images {\n            link\n          }\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n                locale\n              }\n            }\n          }\n          product_types {\n            data {\n              id\n              attributes {\n                slug\n                locale\n              }\n            }\n          }\n          discount\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetFilteredProducts(\n    $productTypeId: ID\n    $filters: [FilterInput!]\n    $cursor: String\n    $page: Int\n    $pageSize: Int\n    $subcategoryId: ID!\n    $locale: I18NLocaleCode!\n    $sort: [String!]\n    $minPrice: Float\n    $maxPrice: Float\n  ) {\n    filteredProducts(\n      productTypeId: $productTypeId\n      filters: $filters\n      cursor: $cursor\n      page: $page\n      pageSize: $pageSize\n      subcategoryId: $subcategoryId\n      locale: $locale\n      sort: $sort\n      minPrice: $minPrice\n      maxPrice: $maxPrice\n    ) {\n      products {\n        id\n        title\n        part_number\n        retail\n        image_link\n        params\n        currency\n        additional_images {\n          link\n        }\n        discount\n        slug\n        locale\n        product_types {\n          data {\n            id\n            attributes {\n              slug\n              locale\n            }\n          }\n        }\n        subcategory {\n          data {\n            id\n            attributes {\n              slug\n              locale\n              categories {\n                data {\n                  id\n                  attributes {\n                    slug\n                    locale\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      nextCursor\n      pageCount\n      totalCount\n      currentPage\n    }\n  }\n"): (typeof documents)["\n  query GetFilteredProducts(\n    $productTypeId: ID\n    $filters: [FilterInput!]\n    $cursor: String\n    $page: Int\n    $pageSize: Int\n    $subcategoryId: ID!\n    $locale: I18NLocaleCode!\n    $sort: [String!]\n    $minPrice: Float\n    $maxPrice: Float\n  ) {\n    filteredProducts(\n      productTypeId: $productTypeId\n      filters: $filters\n      cursor: $cursor\n      page: $page\n      pageSize: $pageSize\n      subcategoryId: $subcategoryId\n      locale: $locale\n      sort: $sort\n      minPrice: $minPrice\n      maxPrice: $maxPrice\n    ) {\n      products {\n        id\n        title\n        part_number\n        retail\n        image_link\n        params\n        currency\n        additional_images {\n          link\n        }\n        discount\n        slug\n        locale\n        product_types {\n          data {\n            id\n            attributes {\n              slug\n              locale\n            }\n          }\n        }\n        subcategory {\n          data {\n            id\n            attributes {\n              slug\n              locale\n              categories {\n                data {\n                  id\n                  attributes {\n                    slug\n                    locale\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      nextCursor\n      pageCount\n      totalCount\n      currentPage\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetMaxPrice(\n    $subcategoryId: ID!\n    $productTypeId: ID\n    $locale: I18NLocaleCode!\n  ) {\n    maxProductPrice(\n      subcategoryId: $subcategoryId\n      productTypeId: $productTypeId\n      locale: $locale\n    )\n  }\n"): (typeof documents)["\n  query GetMaxPrice(\n    $subcategoryId: ID!\n    $productTypeId: ID\n    $locale: I18NLocaleCode!\n  ) {\n    maxProductPrice(\n      subcategoryId: $subcategoryId\n      productTypeId: $productTypeId\n      locale: $locale\n    )\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetHomePageProducts($limit: Int!, $locale: I18NLocaleCode!) {\n    topProducts: products(\n      filters: { salesCount: { gt: 0 } }\n      sort: \"salesCount:desc\"\n      pagination: { limit: $limit }\n      locale: $locale\n    ) {\n      data {\n        id\n        attributes {\n          title\n          part_number\n          retail\n          currency\n          image_link\n          slug\n          params\n          discount\n          salesCount\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n                categories {\n                  data {\n                    id\n                    attributes {\n                      slug\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          product_types {\n            data {\n              id\n              attributes {\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n    newProducts: products(\n      sort: \"createdAt:desc\"\n      pagination: { limit: $limit }\n      locale: $locale\n    ) {\n      data {\n        id\n        attributes {\n          title\n          part_number\n          retail\n          currency\n          image_link\n          slug\n          params\n          discount\n          salesCount\n          createdAt\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n                categories {\n                  data {\n                    id\n                    attributes {\n                      slug\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          product_types {\n            data {\n              id\n              attributes {\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n    saleProducts: products(\n      filters: { discount: { gt: 0 } }\n      sort: \"discount:desc\"\n      pagination: { limit: $limit }\n      locale: $locale\n    ) {\n      data {\n        id\n        attributes {\n          title\n          part_number\n          retail\n          currency\n          image_link\n          slug\n          params\n          discount\n          salesCount\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n                categories {\n                  data {\n                    id\n                    attributes {\n                      slug\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          product_types {\n            data {\n              id\n              attributes {\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetHomePageProducts($limit: Int!, $locale: I18NLocaleCode!) {\n    topProducts: products(\n      filters: { salesCount: { gt: 0 } }\n      sort: \"salesCount:desc\"\n      pagination: { limit: $limit }\n      locale: $locale\n    ) {\n      data {\n        id\n        attributes {\n          title\n          part_number\n          retail\n          currency\n          image_link\n          slug\n          params\n          discount\n          salesCount\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n                categories {\n                  data {\n                    id\n                    attributes {\n                      slug\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          product_types {\n            data {\n              id\n              attributes {\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n    newProducts: products(\n      sort: \"createdAt:desc\"\n      pagination: { limit: $limit }\n      locale: $locale\n    ) {\n      data {\n        id\n        attributes {\n          title\n          part_number\n          retail\n          currency\n          image_link\n          slug\n          params\n          discount\n          salesCount\n          createdAt\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n                categories {\n                  data {\n                    id\n                    attributes {\n                      slug\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          product_types {\n            data {\n              id\n              attributes {\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n    saleProducts: products(\n      filters: { discount: { gt: 0 } }\n      sort: \"discount:desc\"\n      pagination: { limit: $limit }\n      locale: $locale\n    ) {\n      data {\n        id\n        attributes {\n          title\n          part_number\n          retail\n          currency\n          image_link\n          slug\n          params\n          discount\n          salesCount\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n                categories {\n                  data {\n                    id\n                    attributes {\n                      slug\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          product_types {\n            data {\n              id\n              attributes {\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetShopReviews {\n    shopReviews(sort: \"createdAt:desc\") {\n      data {\n        id\n        attributes {\n          customerName\n          comment\n          overallRating\n          selectionConvenience\n          managerConsultation\n          productDelivery\n          paymentProcess\n          createdAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetShopReviews {\n    shopReviews(sort: \"createdAt:desc\") {\n      data {\n        id\n        attributes {\n          customerName\n          comment\n          overallRating\n          selectionConvenience\n          managerConsultation\n          productDelivery\n          paymentProcess\n          createdAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateShopReview($input: ShopReviewInput!) {\n    createShopReview(data: $input) {\n      data {\n        id\n        attributes {\n          customerName\n          comment\n          overallRating\n          selectionConvenience\n          managerConsultation\n          productDelivery\n          paymentProcess\n          createdAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateShopReview($input: ShopReviewInput!) {\n    createShopReview(data: $input) {\n      data {\n        id\n        attributes {\n          customerName\n          comment\n          overallRating\n          selectionConvenience\n          managerConsultation\n          productDelivery\n          paymentProcess\n          createdAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSubcategoryBySlug($slug: String!, $locale: I18NLocaleCode!) {\n    subcategories(filters: { slug: { eq: $slug } }, locale: $locale) {\n      data {\n        id\n        attributes {\n          title\n          slug\n          locale\n          description\n          metaTitle\n          metaDescription\n          langMatches\n          icon {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          categories {\n            data {\n              id\n              attributes {\n                slug\n                locale\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSubcategoryBySlug($slug: String!, $locale: I18NLocaleCode!) {\n    subcategories(filters: { slug: { eq: $slug } }, locale: $locale) {\n      data {\n        id\n        attributes {\n          title\n          slug\n          locale\n          description\n          metaTitle\n          metaDescription\n          langMatches\n          icon {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          categories {\n            data {\n              id\n              attributes {\n                slug\n                locale\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;