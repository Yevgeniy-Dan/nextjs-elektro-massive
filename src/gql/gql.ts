/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query CategoryMenu {\n    categories {\n      data {\n        id\n        attributes {\n          name\n          slug\n          icon {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          subcategories(pagination: { limit: -1 }) {\n            data {\n              id\n              attributes {\n                title\n                slug\n                icon {\n                  data {\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.CategoryMenuDocument,
    "\n  query GetCategories {\n    categories {\n      data {\n        id\n        attributes {\n          name\n          image {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetCategoriesDocument,
    "\n  query GetHomePageProducts($limit: Int!) {\n    topProducts: products(\n      filters: { salesCount: { gt: 0 } }\n      sort: \"salesCount:desc\"\n      pagination: { limit: $limit }\n    ) {\n      data {\n        id\n        attributes {\n          title\n          part_number\n          retail\n          currency\n          image_link\n          slug\n          params\n          discount\n          salesCount\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n              }\n            }\n          }\n          product_types {\n            data {\n              id\n              attributes {\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n    newProducts: products(\n      sort: \"createdAt:desc\"\n      pagination: { limit: $limit }\n    ) {\n      data {\n        id\n        attributes {\n          title\n          part_number\n          retail\n          currency\n          image_link\n          slug\n          params\n          discount\n          salesCount\n          createdAt\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n              }\n            }\n          }\n          product_types {\n            data {\n              id\n              attributes {\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n    saleProducts: products(\n      filters: { discount: { gt: 0 } }\n      sort: \"discount:desc\"\n      pagination: { limit: $limit }\n    ) {\n      data {\n        id\n        attributes {\n          title\n          part_number\n          retail\n          currency\n          image_link\n          slug\n          params\n          discount\n          salesCount\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n              }\n            }\n          }\n          product_types {\n            data {\n              id\n              attributes {\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetHomePageProductsDocument,
    "\n  query GetBanners {\n    banners(sort: \"order:asc\", filters: { isActive: { eq: true } }) {\n      data {\n        id\n        attributes {\n          title\n          altText\n          order\n          image {\n            data {\n              attributes {\n                url\n                width\n                height\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetBannersDocument,
    "\n  mutation CreateOrder($input: OrderInput!) {\n    createOrder(data: $input) {\n      data {\n        id\n        attributes {\n          orderNumber\n          orderItems\n        }\n      }\n    }\n  }\n": types.CreateOrderDocument,
    "\n  query GetOrderByOrderNumber($orderNumber: String!) {\n    orders(filters: { orderNumber: { eq: $orderNumber } }) {\n      data {\n        id\n        attributes {\n          orderNumber\n          orderDate\n          firstName\n          secondName\n          lastName\n          phoneNumber\n          shippingAddress\n          totalAmount\n          paymentMethod\n          deliveryMethod\n        }\n      }\n    }\n  }\n": types.GetOrderByOrderNumberDocument,
    "\n  query GetProduct($productId: ID!) {\n    product(id: $productId) {\n      data {\n        id\n        attributes {\n          part_number\n          title\n          retail\n          currency\n          image_link\n          description\n          discount\n          slug\n          additional_images {\n            id\n            link\n          }\n          params\n          subcategory {\n            data {\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetProductDocument,
    "\n  query GetProductBySlug($productSlug: String!, $productTypeSlug: String!) {\n    products(filters: { slug: { eq: $productSlug } }) {\n      data {\n        id\n        attributes {\n          part_number\n          title\n          retail\n          currency\n          image_link\n          description\n          discount\n          slug\n          additional_images {\n            id\n            link\n          }\n          params\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n                title\n              }\n            }\n          }\n          product_types(filters: { slug: { eq: $productTypeSlug } }) {\n            data {\n              id\n              attributes {\n                slug\n                title\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetProductBySlugDocument,
    "\n  query GetSubcategoryBySlug($slug: String!) {\n    subcategories(filters: { slug: { eq: $slug } }) {\n      data {\n        id\n        attributes {\n          title\n          slug\n        }\n      }\n    }\n  }\n": types.GetSubcategoryBySlugDocument,
    "\n  query GetProductTypes($subcategoryId: ID!) {\n    productTypes(\n      filters: { subcategories: { id: { eq: $subcategoryId } } }\n      pagination: { limit: -1 }\n    ) {\n      data {\n        id\n        attributes {\n          title\n          slug\n          icon {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          description\n        }\n      }\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n  }\n": types.GetProductTypesDocument,
    "\n  query GetProductTypeBySlug($slug: String!) {\n    productTypes(filters: { slug: { eq: $slug } }, pagination: { limit: -1 }) {\n      data {\n        id\n        attributes {\n          title\n          slug\n          icon {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          description\n        }\n      }\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n  }\n": types.GetProductTypeBySlugDocument,
    "\n  query GetProductTypeFilters($productTypeId: ID, $subcategoryId: ID!) {\n    productTypeFilters(\n      productTypeId: $productTypeId\n      subcategoryId: $subcategoryId\n    )\n  }\n": types.GetProductTypeFiltersDocument,
    "\n  query GetFilteredProducts(\n    $productTypeId: ID\n    $filters: [FilterInput!]\n    $cursor: String\n    $page: Int\n    $pageSize: Int\n    $subcategoryId: ID!\n  ) {\n    filteredProducts(\n      productTypeId: $productTypeId\n      filters: $filters\n      cursor: $cursor\n      page: $page\n      pageSize: $pageSize\n      subcategoryId: $subcategoryId\n    ) {\n      products {\n        id\n        title\n        part_number\n        retail\n        image_link\n        params\n        currency\n        additional_images {\n          link\n        }\n        discount\n        slug\n        product_types {\n          data {\n            id\n            attributes {\n              slug\n            }\n          }\n        }\n        subcategory {\n          data {\n            id\n            attributes {\n              slug\n            }\n          }\n        }\n      }\n      nextCursor\n      pageCount\n      totalCount\n      currentPage\n    }\n  }\n": types.GetFilteredProductsDocument,
    "\n  query GetProducts($pageSize: Int!) {\n    products(pagination: { pageSize: $pageSize }) {\n      data {\n        id\n        attributes {\n          part_number\n          title\n          retail\n          currency\n          image_link\n          slug\n          params\n          additional_images {\n            link\n          }\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n              }\n            }\n          }\n          product_types {\n            data {\n              attributes {\n                slug\n              }\n            }\n          }\n          discount\n        }\n      }\n    }\n  }\n": types.GetProductsDocument,
    "\n  query GetBrands {\n    brands {\n      data {\n        id\n        attributes {\n          title\n          logo {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetBrandsDocument,
    "\n  query GetUserFavoriteProducts {\n    userFavorites {\n      favoriteProducts {\n        product {\n          data {\n            id\n            attributes {\n              title\n              part_number\n              retail\n              currency\n              image_link\n              slug\n              discount\n              params\n              subcategory {\n                data {\n                  id\n                  attributes {\n                    slug\n                  }\n                }\n              }\n            }\n          }\n        }\n        product_type {\n          data {\n            id\n            attributes {\n              title\n              slug\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetUserFavoriteProductsDocument,
    "\n  mutation AddToFavorites($input: AddToFavoritesInput!) {\n    addToFavorites(input: $input) {\n      favoriteProducts {\n        product {\n          data {\n            id\n            attributes {\n              title\n            }\n          }\n        }\n        product_type {\n          data {\n            id\n            attributes {\n              title\n            }\n          }\n        }\n      }\n    }\n  }\n": types.AddToFavoritesDocument,
    "\n  mutation RemoveFromFavorites($input: RemoveFromFavoritesInput!) {\n    removeFromFavorites(input: $input) {\n      favoriteProducts {\n        product {\n          data {\n            id\n          }\n        }\n        product_type {\n          data {\n            id\n          }\n        }\n      }\n    }\n  }\n": types.RemoveFromFavoritesDocument,
    "\n  query GetShopReviews {\n    shopReviews(sort: \"createdAt:desc\") {\n      data {\n        id\n        attributes {\n          customerName\n          comment\n          overallRating\n          selectionConvenience\n          managerConsultation\n          productDelivery\n          paymentProcess\n          createdAt\n        }\n      }\n    }\n  }\n": types.GetShopReviewsDocument,
    "\n  mutation CreateShopReview($input: ShopReviewInput!) {\n    createShopReview(data: $input) {\n      data {\n        id\n        attributes {\n          customerName\n          comment\n          overallRating\n          selectionConvenience\n          managerConsultation\n          productDelivery\n          paymentProcess\n          createdAt\n        }\n      }\n    }\n  }\n": types.CreateShopReviewDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CategoryMenu {\n    categories {\n      data {\n        id\n        attributes {\n          name\n          slug\n          icon {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          subcategories(pagination: { limit: -1 }) {\n            data {\n              id\n              attributes {\n                title\n                slug\n                icon {\n                  data {\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CategoryMenu {\n    categories {\n      data {\n        id\n        attributes {\n          name\n          slug\n          icon {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          subcategories(pagination: { limit: -1 }) {\n            data {\n              id\n              attributes {\n                title\n                slug\n                icon {\n                  data {\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCategories {\n    categories {\n      data {\n        id\n        attributes {\n          name\n          image {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCategories {\n    categories {\n      data {\n        id\n        attributes {\n          name\n          image {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetHomePageProducts($limit: Int!) {\n    topProducts: products(\n      filters: { salesCount: { gt: 0 } }\n      sort: \"salesCount:desc\"\n      pagination: { limit: $limit }\n    ) {\n      data {\n        id\n        attributes {\n          title\n          part_number\n          retail\n          currency\n          image_link\n          slug\n          params\n          discount\n          salesCount\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n              }\n            }\n          }\n          product_types {\n            data {\n              id\n              attributes {\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n    newProducts: products(\n      sort: \"createdAt:desc\"\n      pagination: { limit: $limit }\n    ) {\n      data {\n        id\n        attributes {\n          title\n          part_number\n          retail\n          currency\n          image_link\n          slug\n          params\n          discount\n          salesCount\n          createdAt\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n              }\n            }\n          }\n          product_types {\n            data {\n              id\n              attributes {\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n    saleProducts: products(\n      filters: { discount: { gt: 0 } }\n      sort: \"discount:desc\"\n      pagination: { limit: $limit }\n    ) {\n      data {\n        id\n        attributes {\n          title\n          part_number\n          retail\n          currency\n          image_link\n          slug\n          params\n          discount\n          salesCount\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n              }\n            }\n          }\n          product_types {\n            data {\n              id\n              attributes {\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetHomePageProducts($limit: Int!) {\n    topProducts: products(\n      filters: { salesCount: { gt: 0 } }\n      sort: \"salesCount:desc\"\n      pagination: { limit: $limit }\n    ) {\n      data {\n        id\n        attributes {\n          title\n          part_number\n          retail\n          currency\n          image_link\n          slug\n          params\n          discount\n          salesCount\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n              }\n            }\n          }\n          product_types {\n            data {\n              id\n              attributes {\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n    newProducts: products(\n      sort: \"createdAt:desc\"\n      pagination: { limit: $limit }\n    ) {\n      data {\n        id\n        attributes {\n          title\n          part_number\n          retail\n          currency\n          image_link\n          slug\n          params\n          discount\n          salesCount\n          createdAt\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n              }\n            }\n          }\n          product_types {\n            data {\n              id\n              attributes {\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n    saleProducts: products(\n      filters: { discount: { gt: 0 } }\n      sort: \"discount:desc\"\n      pagination: { limit: $limit }\n    ) {\n      data {\n        id\n        attributes {\n          title\n          part_number\n          retail\n          currency\n          image_link\n          slug\n          params\n          discount\n          salesCount\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n              }\n            }\n          }\n          product_types {\n            data {\n              id\n              attributes {\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetBanners {\n    banners(sort: \"order:asc\", filters: { isActive: { eq: true } }) {\n      data {\n        id\n        attributes {\n          title\n          altText\n          order\n          image {\n            data {\n              attributes {\n                url\n                width\n                height\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetBanners {\n    banners(sort: \"order:asc\", filters: { isActive: { eq: true } }) {\n      data {\n        id\n        attributes {\n          title\n          altText\n          order\n          image {\n            data {\n              attributes {\n                url\n                width\n                height\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateOrder($input: OrderInput!) {\n    createOrder(data: $input) {\n      data {\n        id\n        attributes {\n          orderNumber\n          orderItems\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateOrder($input: OrderInput!) {\n    createOrder(data: $input) {\n      data {\n        id\n        attributes {\n          orderNumber\n          orderItems\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetOrderByOrderNumber($orderNumber: String!) {\n    orders(filters: { orderNumber: { eq: $orderNumber } }) {\n      data {\n        id\n        attributes {\n          orderNumber\n          orderDate\n          firstName\n          secondName\n          lastName\n          phoneNumber\n          shippingAddress\n          totalAmount\n          paymentMethod\n          deliveryMethod\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetOrderByOrderNumber($orderNumber: String!) {\n    orders(filters: { orderNumber: { eq: $orderNumber } }) {\n      data {\n        id\n        attributes {\n          orderNumber\n          orderDate\n          firstName\n          secondName\n          lastName\n          phoneNumber\n          shippingAddress\n          totalAmount\n          paymentMethod\n          deliveryMethod\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProduct($productId: ID!) {\n    product(id: $productId) {\n      data {\n        id\n        attributes {\n          part_number\n          title\n          retail\n          currency\n          image_link\n          description\n          discount\n          slug\n          additional_images {\n            id\n            link\n          }\n          params\n          subcategory {\n            data {\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProduct($productId: ID!) {\n    product(id: $productId) {\n      data {\n        id\n        attributes {\n          part_number\n          title\n          retail\n          currency\n          image_link\n          description\n          discount\n          slug\n          additional_images {\n            id\n            link\n          }\n          params\n          subcategory {\n            data {\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProductBySlug($productSlug: String!, $productTypeSlug: String!) {\n    products(filters: { slug: { eq: $productSlug } }) {\n      data {\n        id\n        attributes {\n          part_number\n          title\n          retail\n          currency\n          image_link\n          description\n          discount\n          slug\n          additional_images {\n            id\n            link\n          }\n          params\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n                title\n              }\n            }\n          }\n          product_types(filters: { slug: { eq: $productTypeSlug } }) {\n            data {\n              id\n              attributes {\n                slug\n                title\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProductBySlug($productSlug: String!, $productTypeSlug: String!) {\n    products(filters: { slug: { eq: $productSlug } }) {\n      data {\n        id\n        attributes {\n          part_number\n          title\n          retail\n          currency\n          image_link\n          description\n          discount\n          slug\n          additional_images {\n            id\n            link\n          }\n          params\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n                title\n              }\n            }\n          }\n          product_types(filters: { slug: { eq: $productTypeSlug } }) {\n            data {\n              id\n              attributes {\n                slug\n                title\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSubcategoryBySlug($slug: String!) {\n    subcategories(filters: { slug: { eq: $slug } }) {\n      data {\n        id\n        attributes {\n          title\n          slug\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSubcategoryBySlug($slug: String!) {\n    subcategories(filters: { slug: { eq: $slug } }) {\n      data {\n        id\n        attributes {\n          title\n          slug\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProductTypes($subcategoryId: ID!) {\n    productTypes(\n      filters: { subcategories: { id: { eq: $subcategoryId } } }\n      pagination: { limit: -1 }\n    ) {\n      data {\n        id\n        attributes {\n          title\n          slug\n          icon {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          description\n        }\n      }\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProductTypes($subcategoryId: ID!) {\n    productTypes(\n      filters: { subcategories: { id: { eq: $subcategoryId } } }\n      pagination: { limit: -1 }\n    ) {\n      data {\n        id\n        attributes {\n          title\n          slug\n          icon {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          description\n        }\n      }\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProductTypeBySlug($slug: String!) {\n    productTypes(filters: { slug: { eq: $slug } }, pagination: { limit: -1 }) {\n      data {\n        id\n        attributes {\n          title\n          slug\n          icon {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          description\n        }\n      }\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProductTypeBySlug($slug: String!) {\n    productTypes(filters: { slug: { eq: $slug } }, pagination: { limit: -1 }) {\n      data {\n        id\n        attributes {\n          title\n          slug\n          icon {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          description\n        }\n      }\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProductTypeFilters($productTypeId: ID, $subcategoryId: ID!) {\n    productTypeFilters(\n      productTypeId: $productTypeId\n      subcategoryId: $subcategoryId\n    )\n  }\n"): (typeof documents)["\n  query GetProductTypeFilters($productTypeId: ID, $subcategoryId: ID!) {\n    productTypeFilters(\n      productTypeId: $productTypeId\n      subcategoryId: $subcategoryId\n    )\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetFilteredProducts(\n    $productTypeId: ID\n    $filters: [FilterInput!]\n    $cursor: String\n    $page: Int\n    $pageSize: Int\n    $subcategoryId: ID!\n  ) {\n    filteredProducts(\n      productTypeId: $productTypeId\n      filters: $filters\n      cursor: $cursor\n      page: $page\n      pageSize: $pageSize\n      subcategoryId: $subcategoryId\n    ) {\n      products {\n        id\n        title\n        part_number\n        retail\n        image_link\n        params\n        currency\n        additional_images {\n          link\n        }\n        discount\n        slug\n        product_types {\n          data {\n            id\n            attributes {\n              slug\n            }\n          }\n        }\n        subcategory {\n          data {\n            id\n            attributes {\n              slug\n            }\n          }\n        }\n      }\n      nextCursor\n      pageCount\n      totalCount\n      currentPage\n    }\n  }\n"): (typeof documents)["\n  query GetFilteredProducts(\n    $productTypeId: ID\n    $filters: [FilterInput!]\n    $cursor: String\n    $page: Int\n    $pageSize: Int\n    $subcategoryId: ID!\n  ) {\n    filteredProducts(\n      productTypeId: $productTypeId\n      filters: $filters\n      cursor: $cursor\n      page: $page\n      pageSize: $pageSize\n      subcategoryId: $subcategoryId\n    ) {\n      products {\n        id\n        title\n        part_number\n        retail\n        image_link\n        params\n        currency\n        additional_images {\n          link\n        }\n        discount\n        slug\n        product_types {\n          data {\n            id\n            attributes {\n              slug\n            }\n          }\n        }\n        subcategory {\n          data {\n            id\n            attributes {\n              slug\n            }\n          }\n        }\n      }\n      nextCursor\n      pageCount\n      totalCount\n      currentPage\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProducts($pageSize: Int!) {\n    products(pagination: { pageSize: $pageSize }) {\n      data {\n        id\n        attributes {\n          part_number\n          title\n          retail\n          currency\n          image_link\n          slug\n          params\n          additional_images {\n            link\n          }\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n              }\n            }\n          }\n          product_types {\n            data {\n              attributes {\n                slug\n              }\n            }\n          }\n          discount\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProducts($pageSize: Int!) {\n    products(pagination: { pageSize: $pageSize }) {\n      data {\n        id\n        attributes {\n          part_number\n          title\n          retail\n          currency\n          image_link\n          slug\n          params\n          additional_images {\n            link\n          }\n          subcategory {\n            data {\n              id\n              attributes {\n                slug\n              }\n            }\n          }\n          product_types {\n            data {\n              attributes {\n                slug\n              }\n            }\n          }\n          discount\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetBrands {\n    brands {\n      data {\n        id\n        attributes {\n          title\n          logo {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetBrands {\n    brands {\n      data {\n        id\n        attributes {\n          title\n          logo {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUserFavoriteProducts {\n    userFavorites {\n      favoriteProducts {\n        product {\n          data {\n            id\n            attributes {\n              title\n              part_number\n              retail\n              currency\n              image_link\n              slug\n              discount\n              params\n              subcategory {\n                data {\n                  id\n                  attributes {\n                    slug\n                  }\n                }\n              }\n            }\n          }\n        }\n        product_type {\n          data {\n            id\n            attributes {\n              title\n              slug\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetUserFavoriteProducts {\n    userFavorites {\n      favoriteProducts {\n        product {\n          data {\n            id\n            attributes {\n              title\n              part_number\n              retail\n              currency\n              image_link\n              slug\n              discount\n              params\n              subcategory {\n                data {\n                  id\n                  attributes {\n                    slug\n                  }\n                }\n              }\n            }\n          }\n        }\n        product_type {\n          data {\n            id\n            attributes {\n              title\n              slug\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddToFavorites($input: AddToFavoritesInput!) {\n    addToFavorites(input: $input) {\n      favoriteProducts {\n        product {\n          data {\n            id\n            attributes {\n              title\n            }\n          }\n        }\n        product_type {\n          data {\n            id\n            attributes {\n              title\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddToFavorites($input: AddToFavoritesInput!) {\n    addToFavorites(input: $input) {\n      favoriteProducts {\n        product {\n          data {\n            id\n            attributes {\n              title\n            }\n          }\n        }\n        product_type {\n          data {\n            id\n            attributes {\n              title\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveFromFavorites($input: RemoveFromFavoritesInput!) {\n    removeFromFavorites(input: $input) {\n      favoriteProducts {\n        product {\n          data {\n            id\n          }\n        }\n        product_type {\n          data {\n            id\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveFromFavorites($input: RemoveFromFavoritesInput!) {\n    removeFromFavorites(input: $input) {\n      favoriteProducts {\n        product {\n          data {\n            id\n          }\n        }\n        product_type {\n          data {\n            id\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetShopReviews {\n    shopReviews(sort: \"createdAt:desc\") {\n      data {\n        id\n        attributes {\n          customerName\n          comment\n          overallRating\n          selectionConvenience\n          managerConsultation\n          productDelivery\n          paymentProcess\n          createdAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetShopReviews {\n    shopReviews(sort: \"createdAt:desc\") {\n      data {\n        id\n        attributes {\n          customerName\n          comment\n          overallRating\n          selectionConvenience\n          managerConsultation\n          productDelivery\n          paymentProcess\n          createdAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateShopReview($input: ShopReviewInput!) {\n    createShopReview(data: $input) {\n      data {\n        id\n        attributes {\n          customerName\n          comment\n          overallRating\n          selectionConvenience\n          managerConsultation\n          productDelivery\n          paymentProcess\n          createdAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateShopReview($input: ShopReviewInput!) {\n    createShopReview(data: $input) {\n      data {\n        id\n        attributes {\n          customerName\n          comment\n          overallRating\n          selectionConvenience\n          managerConsultation\n          productDelivery\n          paymentProcess\n          createdAt\n        }\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;